### COLORS ###
DEF_COLOR = \033[0;39m
GRAY = \033[0;90m
RED = \033[0;91m
GREEN = \033[0;92m
YELLOW = \033[0;93m
BLUE = \033[0;94m
MAGENTA = \033[0;95m
CYAN = \033[0;96m
WHITE = \033[0;97m

### VARIABLES ###

NAME = pipex
CC = gcc
CFLAGS = -Wall -Wextra -Werror
INCLUDE = pipex.h
OBJF = .cache_exists

# Directories
OBJ_DIR = obj/

# Source Files
SRC_FILES = pipex.c pipex_utils.c pipex_utils2.c \

# Object Files
OBJ = $(addprefix $(OBJ_DIR), $(SRC_FILES:.c=.o))

### COMPILATION ###

$(OBJF):
	@mkdir -p $(OBJ_DIR)

# Creating object files (.o) from source files (.c) inside the OBJ_DIR directory.
# The option -o indicates the name of the outpout, the option -c indicates the source that is used.

$(OBJ_DIR)%.o : %.c $(INCLUDE) | $(OBJF)
	@echo "$(YELLOW)Compiling $<...$(DEF_COLOR)"
	@$(CC) $(CFLAGS) -c $< -o $@

# Compiling all objets files (.o) to a file "NAME" :
$(NAME) : $(OBJ)
	@$(MAKE) -C ./libft
	@$(CC) $(CFLAGS) $^ ./libft/libft.a -o $@
	@echo "$(GREEN)-> pipex compiled!$(DEF_COLOR)"

### MEMO ###
# 	Special variables :
#		$@	Represents the target file that is being generated by the rule
#		$<	Represents the first dependency of the rule
#		$^	Represents all the dependencies of the rule, separated by spaces.
#		$?	Represents a list of dependencies that are newer than the target file.
#		$*	Represents the stem of the target filename (without the extension)

### RULES ###

all : $(NAME)

clean :
	@$(MAKE) -C ./libft fclean
	@rm -rf $(OBJ_DIR)
	@rm -rf $(MAIN:.c=.o)
	@echo "$(BLUE)pipex object files cleaned!$(DEF_COLOR)"

fclean : clean
	@rm -rf $(NAME)
	@echo "$(BLUE)pipex executable file cleaned!$(DEF_COLOR)"

re :	fclean all
	@echo "$(CYAN)Cleaned and rebuilt everything for pipex!$(DEF_COLOR)"